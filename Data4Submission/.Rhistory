t=read.csv('MorphData29 May 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData05 Jun 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
t=read.csv('MorphData29 May 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
es = read.csv('ElasticData25 Nov 2020.csv')
setwd(getSrcDirectory()[1])
getSrcDirectory()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
this.dir <- dirname(parent.frame(2)$ofile)
parent.frame
parent.frame(2)$ofile
dirname(rstudioapi::getActiveDocumentContext()$path)
install.packages("rstudioapi")
dirname(rstudioapi::getActiveDocumentContext()$path)
require('lme4')
require('rstudioapi')
require('stringr')
require('doBy')
require('plyr')
require('extrafont')
require('MHTdiscrete')
require('psych')
require('lsr')
require('MASS')
loadfonts(device='win')
windowsFonts(
A=windowsFont("Garamond"),
B=windowsFont("Aerial"),
C=windowsFont("Times New Roman")
)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
boxPoint = function(var,fact,titletxt, cols, groupNames){
resp=var
treat=fact
par(family='Garamond')
if(missing(cols)) {cols = 'grey'}
bTest =  bartlett.test(resp~treat)
if (bTest$p.value<0.05) {nonparametric = 1}
else {nonparametric = 0}
if (nonparametric)  {
Test = kruskal.test(resp~treat)
pVal = Test$p.value}
else {
if (nlevels(treat)==2){
Test= t.test(resp~treat)
pVal = Test$p.value}
else {pVal = anova(lm(mass~group,data=d))$"Pr(>F)"[1]}
}
if ((missing(groupNames))){
groupNames = levels(var)
}
if ((missing(titletxt))){
titletxt = 'variable'
}
titletxt = str_c(titletxt,' p:', format(pVal,digits=2))
boxplot(resp~treat, main=titletxt,las=2,col=cols, cex.axis=1.2, names = groupNames)
stripchart(resp~treat, vertical=TRUE, add=TRUE, pch=16,col='red',method='jitter',cex=1)
}
plotStats = function(dependent,independent,dta,fctor, titletxt, cols){
x=unlist(dta[names(dta)==independent])
y=unlist(dta[names(dta)==dependent])
group = unlist(dta[names(dta)==fctor])
lmFit = lm(x~y)
pValFit = summary(lmFit)
if ((missing(titletxt))){titletxt = str_c(dependent,' vs ',independent)}
if ((missing(cols))){cols = c('white','grey50')}
titletxt = str_c(titletxt,' p:',format(pValFit$coefficients[2,4],digits=2))
plot(y~x,main =titletxt , pch=21,bg=cols[as.numeric(group)],col='black', cex=1.2, xlab = independent, ylab = dependent)
legend('bottomright',levels(group),pch=21,pt.bg=cols,cex=1.2,col='black',inset=c(0,1), xpd=TRUE, horiz=TRUE, bty="n")
}
tableFormatByGroup = function(var,fctor,dta){
y=unlist(dta[var])
group =unlist(dta[fctor])
meanVar = aggregate(y~group,data=dta,function(x) mean(x,na.rm=TRUE),na.action=na.pass)
sdVar = aggregate(y~group,data=dta,function(x) sd(x,na.rm=TRUE),na.action=na.pass)
if (sdVar$y[1] ==0 |sdVar$y[2] ==0){
nonparametric=0
pVal = 1
} else {
bTest =  bartlett.test(y~group,data=dta)
nonparametric = ifelse(bTest$p.value<0.05,1,0)
if (nonparametric)  {
Test = kruskal.test(y~group,data=dta)
pVal = Test$p.value
} else {
if (nlevels(group)==2){
Test= t.test(y~group)
pVal = Test$p.value
} else {pVal = anova(lm(y~group,data=dta))$"Pr(>F)"[1]}
}
}
cohd = cohensD(y~group)
varString = ' '
for (i in 1:nlevels(group)){varString[i] = str_c(format(meanVar[i,2],digits=2),'+-',format(sdVar[i,2],digits=2))}
varString[i+1] = ifelse(nonparametric,str_c(format(pVal,digits=2),'*'),str_c(format(pVal,digits=2)))
varString[i+2]= format(cohd, digits=2)
return(varString)
}
require('lme4')
require('rstudioapi')
require('stringr')
require('doBy')
require('plyr')
require('extrafont')
require('MHTdiscrete')
require('psych')
require('lsr')
require('MASS')
loadfonts(device='win')
windowsFonts(
A=windowsFont("Garamond"),
B=windowsFont("Aerial"),
C=windowsFont("Times New Roman")
)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
boxPoint = function(var,fact,titletxt, cols, groupNames){
resp=var
treat=fact
par(family='Garamond')
if(missing(cols)) {cols = 'grey'}
bTest =  bartlett.test(resp~treat)
if (bTest$p.value<0.05) {nonparametric = 1}
else {nonparametric = 0}
if (nonparametric)  {
Test = kruskal.test(resp~treat)
pVal = Test$p.value}
else {
if (nlevels(treat)==2){
Test= t.test(resp~treat)
pVal = Test$p.value}
else {pVal = anova(lm(mass~group,data=d))$"Pr(>F)"[1]}
}
if ((missing(groupNames))){
groupNames = levels(var)
}
if ((missing(titletxt))){
titletxt = 'variable'
}
titletxt = str_c(titletxt,' p:', format(pVal,digits=2))
boxplot(resp~treat, main=titletxt,las=2,col=cols, cex.axis=1.2, names = groupNames)
stripchart(resp~treat, vertical=TRUE, add=TRUE, pch=16,col='red',method='jitter',cex=1)
}
plotStats = function(dependent,independent,dta,fctor, titletxt, cols){
x=unlist(dta[names(dta)==independent])
y=unlist(dta[names(dta)==dependent])
group = unlist(dta[names(dta)==fctor])
lmFit = lm(x~y)
pValFit = summary(lmFit)
if ((missing(titletxt))){titletxt = str_c(dependent,' vs ',independent)}
if ((missing(cols))){cols = c('white','grey50')}
titletxt = str_c(titletxt,' p:',format(pValFit$coefficients[2,4],digits=2))
plot(y~x,main =titletxt , pch=21,bg=cols[as.numeric(group)],col='black', cex=1.2, xlab = independent, ylab = dependent)
legend('bottomright',levels(group),pch=21,pt.bg=cols,cex=1.2,col='black',inset=c(0,1), xpd=TRUE, horiz=TRUE, bty="n")
}
tableFormatByGroup = function(var,fctor,dta){
y=unlist(dta[var])
group =unlist(dta[fctor])
meanVar = aggregate(y~group,data=dta,function(x) mean(x,na.rm=TRUE),na.action=na.pass)
sdVar = aggregate(y~group,data=dta,function(x) sd(x,na.rm=TRUE),na.action=na.pass)
if (sdVar$y[1] ==0 |sdVar$y[2] ==0){
nonparametric=0
pVal = 1
} else {
bTest =  bartlett.test(y~group,data=dta)
nonparametric = ifelse(bTest$p.value<0.05,1,0)
if (nonparametric)  {
Test = kruskal.test(y~group,data=dta)
pVal = Test$p.value
} else {
if (nlevels(group)==2){
Test= t.test(y~group)
pVal = Test$p.value
} else {pVal = anova(lm(y~group,data=dta))$"Pr(>F)"[1]}
}
}
cohd = cohensD(y~group)
varString = ' '
for (i in 1:nlevels(group)){varString[i] = str_c(format(meanVar[i,2],digits=2),'+-',format(sdVar[i,2],digits=2))}
varString[i+1] = ifelse(nonparametric,str_c(format(pVal,digits=2),'*'),str_c(format(pVal,digits=2)))
varString[i+2]= format(cohd, digits=2)
return(varString)
}
dirname(rstudioapi::getActiveDocumentContext()$path)
install.packages("rstudioapi")
dirname(parent.frame(2)$ofile)
File <- "SixMonthMorphpaperV4.Rmd"
Files <- list.files(path=file.path("~"),recursive=T,include.dirs=T)
Path.file <- names(unlist(sapply(Files,grep,pattern=File))[1])
Dir.wd <- dirname(Path.file)
File <- 'SixMonthMorphpaperV4.Rmd'
Files <- list.files(path=file.path("~"),recursive=T,include.dirs=T)
Path.file <- names(unlist(sapply(Files,grep,pattern=File))[1])
Dir.wd <- dirname(Path.file)
names(unlist(sapply(Files,grep,pattern=File))[1])
setwd("G:/My Drive/PennStateStuff/Suzanne_Cox_BOX_Backup/Suzanne_Cox/SuzanneGF/Botox and Growth/SixMonthMorphPaper/MatlabCode/DataForSubmission")
File <- "SixMonthMorphpaperV4.Rmd"
library("rstudioapi")
t=read.csv('MorphData29 May 2020.csv')
setwd("G:/My Drive/PennStateStuff/Suzanne_Cox_BOX_Backup/Suzanne_Cox/SuzanneGF/Botox and Growth/SixMonthMorphPaper/MatlabCode/DataForSubmission")
t=read.csv('MorphData29 May 2020.csv')
setwd("~/")
setwd("G:/My Drive/PennStateStuff/Suzanne_Cox_BOX_Backup/Suzanne_Cox/SuzanneGF/Botox and Growth/SixMonthMorphPaper/MatlabCode/DataForSubmission")
t=read.csv('MorphData29 May 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
t=read.csv('MorphData29 May 2020.csv')
t=read.csv('MorphData29 May 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
t=read.csv('MorphData29 May 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
t=read.csv('MorphData25 Nove 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
t=read.csv('MorphData25 Nove 2020.csv')
t=read.csv('MorphData25 Nov 2020.csv')
t=read.csv('MorphData25 Nov 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
ed$group = droplevels(ed$group)
View(ed)
ed$group
droplevels(ed$group)
t=read.csv('MorphData25 Nov 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
#ed$group = droplevels(ed$group)
dta=ed
require('pander')
panderOptions('round',1)
panderOptions('table.style','rmarkdown')
panderOptions("table.split.table", Inf)
panderOptions('keep.trailing.zeros',TRUE)
library(plyr)
#functional data
totalsEd = count (ed$group)
totalsEd[3,2] = ' '
totalsEd[4,2] = ' '
massString = tableFormatByGroup('mass','group',ed)
bDensityString = tableFormatByGroup('BmdGcm2','group',ed)
perFatString =  tableFormatByGroup('PerFat','group',ed)
avMaString =  tableFormatByGroup('avMa','group',ed)
tendonKString = tableFormatByGroup('tendonK','group',ed)
legLengthString =  tableFormatByGroup('legLength','group',ed)
femurNString =  tableFormatByGroup('femurN','group',ed)
tibiaNString =  tableFormatByGroup('tibiaN','group',ed)
tmtNString =  tableFormatByGroup('tmtN','group',ed)
toeNString =  tableFormatByGroup('toeN','group',ed)
table.Functional = data.frame(totalsEd[,2],massString,bDensityString,perFatString,avMaString,tendonKString, legLengthString, femurNString,tibiaNString,tmtNString,toeNString)
row.names(table.Functional) = c('Restricted','Control','pVal','ES')
colnames(table.Functional) = c('Total animals','mass (kg)','Bone Density cm2','Percent Fat','Moment Arm mm','Tendon Stiffness','Leg Length mm','N.femur Length','n.tibia Length','n.tmt Length','n.toeLength')
table2.Functional = as.data.frame(t(table.Functional))
library(knitr)
pandoc.table(table2.Functional, caption='Table 1: Morpgh data by treatment', justify='center')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Functions
require('lme4')
library("rstudioapi")
require('stringr')
require('doBy')
require('plyr')
require('extrafont')
require('MHTdiscrete')
require('psych')
require('lsr')
require('MASS')
loadfonts(device='win')
windowsFonts(
A=windowsFont("Garamond"),
B=windowsFont("Aerial"),
C=windowsFont("Times New Roman")
)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
boxPoint = function(var,fact,titletxt, cols, groupNames){
resp=var
treat=fact
par(family='Garamond')
if(missing(cols)) {cols = 'grey'}
bTest =  bartlett.test(resp~treat)
if (bTest$p.value<0.05) {nonparametric = 1}
else {nonparametric = 0}
if (nonparametric)  {
Test = kruskal.test(resp~treat)
pVal = Test$p.value}
else {
if (nlevels(treat)==2){
Test= t.test(resp~treat)
pVal = Test$p.value}
else {pVal = anova(lm(mass~group,data=d))$"Pr(>F)"[1]}
}
if ((missing(groupNames))){
groupNames = levels(var)
}
if ((missing(titletxt))){
titletxt = 'variable'
}
titletxt = str_c(titletxt,' p:', format(pVal,digits=2))
boxplot(resp~treat, main=titletxt,las=2,col=cols, cex.axis=1.2, names = groupNames)
stripchart(resp~treat, vertical=TRUE, add=TRUE, pch=16,col='red',method='jitter',cex=1)
}
plotStats = function(dependent,independent,dta,fctor, titletxt, cols){
x=unlist(dta[names(dta)==independent])
y=unlist(dta[names(dta)==dependent])
group = unlist(dta[names(dta)==fctor])
lmFit = lm(x~y)
pValFit = summary(lmFit)
if ((missing(titletxt))){titletxt = str_c(dependent,' vs ',independent)}
if ((missing(cols))){cols = c('white','grey50')}
titletxt = str_c(titletxt,' p:',format(pValFit$coefficients[2,4],digits=2))
plot(y~x,main =titletxt , pch=21,bg=cols[as.numeric(group)],col='black', cex=1.2, xlab = independent, ylab = dependent)
legend('bottomright',levels(group),pch=21,pt.bg=cols,cex=1.2,col='black',inset=c(0,1), xpd=TRUE, horiz=TRUE, bty="n")
}
tableFormatByGroup = function(var,fctor,dta){
y=unlist(dta[var])
group =unlist(dta[fctor])
meanVar = aggregate(y~group,data=dta,function(x) mean(x,na.rm=TRUE),na.action=na.pass)
sdVar = aggregate(y~group,data=dta,function(x) sd(x,na.rm=TRUE),na.action=na.pass)
if (sdVar$y[1] ==0 |sdVar$y[2] ==0){
nonparametric=0
pVal = 1
} else {
bTest =  bartlett.test(y~group,data=dta)
nonparametric = ifelse(bTest$p.value<0.05,1,0)
if (nonparametric)  {
Test = kruskal.test(y~group,data=dta)
pVal = Test$p.value
} else {
if (nlevels(group)==2){
Test= t.test(y~group)
pVal = Test$p.value
} else {pVal = anova(lm(y~group,data=dta))$"Pr(>F)"[1]}
}
}
cohd = cohensD(y~group)
varString = ' '
for (i in 1:nlevels(group)){varString[i] = str_c(format(meanVar[i,2],digits=2),'+-',format(sdVar[i,2],digits=2))}
varString[i+1] = ifelse(nonparametric,str_c(format(pVal,digits=2),'*'),str_c(format(pVal,digits=2)))
varString[i+2]= format(cohd, digits=2)
return(varString)
}
# Chunk 3: cars
t=read.csv('MorphData25 Nov 2020.csv')
ll = read.csv('LegLengths.csv')
es = read.csv('ElasticData25 Nov 2020.csv')
es$tendonEGpa = es$tendonE/1e9
es$KE = 0.5*es$mass*es$maxV^2
es$workPKg = es$work/(2*es$sumExtensors/1000)
es$legLength = es$femur+es$tibia+es$tmt+es$toe
es$femurN = es$femur/es$legLength
es$tibiaN = es$tibia/es$legLength
es$tmtN = es$tmt/es$legLength
es$toeN = es$toe/es$legLength
ed = es[es$group=='E' |es$group=='D',]
#ed$group = droplevels(ed$group)
dta=ed
require('pander')
panderOptions('round',1)
panderOptions('table.style','rmarkdown')
panderOptions("table.split.table", Inf)
panderOptions('keep.trailing.zeros',TRUE)
library(plyr)
#functional data
totalsEd = count (ed$group)
totalsEd[3,2] = ' '
totalsEd[4,2] = ' '
massString = tableFormatByGroup('mass','group',ed)
bDensityString = tableFormatByGroup('BmdGcm2','group',ed)
perFatString =  tableFormatByGroup('PerFat','group',ed)
avMaString =  tableFormatByGroup('avMa','group',ed)
tendonKString = tableFormatByGroup('tendonK','group',ed)
legLengthString =  tableFormatByGroup('legLength','group',ed)
femurNString =  tableFormatByGroup('femurN','group',ed)
tibiaNString =  tableFormatByGroup('tibiaN','group',ed)
tmtNString =  tableFormatByGroup('tmtN','group',ed)
toeNString =  tableFormatByGroup('toeN','group',ed)
table.Functional = data.frame(totalsEd[,2],massString,bDensityString,perFatString,avMaString,tendonKString, legLengthString, femurNString,tibiaNString,tmtNString,toeNString)
row.names(table.Functional) = c('Restricted','Control','pVal','ES')
colnames(table.Functional) = c('Total animals','mass (kg)','Bone Density cm2','Percent Fat','Moment Arm mm','Tendon Stiffness','Leg Length mm','N.femur Length','n.tibia Length','n.tmt Length','n.toeLength')
table2.Functional = as.data.frame(t(table.Functional))
library(knitr)
pandoc.table(table2.Functional, caption='Table 1: Morpgh data by treatment', justify='center')
